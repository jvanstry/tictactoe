Data Structures:
-board -> 3 x 3 spots, status bar (who's turn, game result if applicable), which piece is who panel, cats game or winning line drawing layer on top of board
-spot view with functions: display X, display O
-referee with functions: check for cat's -> boolean, check for cpu win -> number of winning line
-board view with functions: display cat's game(accepts boolean), display winning line strikethru(accepts winning line number)
 

Gameplay Algorithm:
(1) give player option of X's or O's
(2) display which piece is player, which is CPU -> leave static throughout game -> X's turn first
(3) if computer's turn make play, if player's turn prompt and wait
(4) if computer has just played, check for victory for CPU
(5) check for cat's game (9 total plays)
(6) if no CPU victory or cat's game, flip turn to other piece
(7) repeat steps (3) thru (5) until CPU victory or cat's game
(8) make proper display of game results, ask if another game is desired
(9) if another game is desired, flip pieces, wipe stored game data from board, and return to step (2)


Determining Win:
-hard code winning lines
-> 3 vertical, 3 horizontal, 2 diagonal
-loop thru hard coding, return which winning line number so as to facilitate drawing of strikethru

Optimal Strategy:
if first: take corner -> take another corner -> go for win / block winners
if second: take middle -> block potential winners